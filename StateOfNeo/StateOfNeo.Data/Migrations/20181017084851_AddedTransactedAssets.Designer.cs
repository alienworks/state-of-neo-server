// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StateOfNeo.Data;

namespace StateOfNeo.Data.Migrations
{
    [DbContext(typeof(StateOfNeoContext))]
    [Migration("20181017084851_AddedTransactedAssets")]
    partial class AddedTransactedAssets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StateOfNeo.Data.Models.Address", b =>
                {
                    b.Property<string>("PublicAddress")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.HasKey("PublicAddress");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("MaxSupply");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Assets");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.Block", b =>
                {
                    b.Property<string>("Hash")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Height");

                    b.Property<string>("InvocationScript");

                    b.Property<int>("Size");

                    b.Property<long>("Timestamp");

                    b.Property<string>("Validator");

                    b.Property<string>("VerificationScript");

                    b.HasKey("Hash");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FlagUrl");

                    b.Property<int?>("Height");

                    b.Property<bool>("IsHttps");

                    b.Property<double?>("Latitude");

                    b.Property<string>("Locale");

                    b.Property<string>("Location");

                    b.Property<double?>("Longitude");

                    b.Property<int?>("MemoryPool");

                    b.Property<string>("Net");

                    b.Property<int?>("Peers");

                    b.Property<string>("Protocol");

                    b.Property<string>("SuccessUrl");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.Property<string>("Version");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.NodeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ip");

                    b.Property<int>("NodeId");

                    b.Property<long?>("Port");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeAddresses");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.NodeStatusUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockHash");

                    b.Property<int>("BlockId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsP2pTcpOnline");

                    b.Property<bool>("IsP2pWsOnline");

                    b.Property<bool>("IsRpcOnline");

                    b.Property<int>("NodeId");

                    b.HasKey("Id");

                    b.HasIndex("BlockHash");

                    b.HasIndex("NodeId");

                    b.ToTable("NodeStatusUpdates");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.TransactedAsset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount");

                    b.Property<int>("AssetType");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("FromAddressId");

                    b.Property<string>("FromAddressPublicAddress");

                    b.Property<int>("ToAddressId");

                    b.Property<string>("ToAddressPublicAddress");

                    b.Property<int>("TransactionId");

                    b.Property<string>("TransactionScriptHash");

                    b.HasKey("Id");

                    b.HasIndex("FromAddressPublicAddress");

                    b.HasIndex("ToAddressPublicAddress");

                    b.HasIndex("TransactionScriptHash");

                    b.ToTable("TransactedAssets");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.Transaction", b =>
                {
                    b.Property<string>("ScriptHash")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BlockHash");

                    b.Property<int>("BlockId");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("NetworkFee");

                    b.Property<int>("Type");

                    b.HasKey("ScriptHash");

                    b.HasIndex("BlockHash");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.NodeAddress", b =>
                {
                    b.HasOne("StateOfNeo.Data.Models.Node", "Node")
                        .WithMany("NodeAddresses")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.NodeStatusUpdate", b =>
                {
                    b.HasOne("StateOfNeo.Data.Models.Block", "Block")
                        .WithMany("NodeStatusUpdates")
                        .HasForeignKey("BlockHash");

                    b.HasOne("StateOfNeo.Data.Models.Node", "Node")
                        .WithMany("NodeStatusUpdates")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.TransactedAsset", b =>
                {
                    b.HasOne("StateOfNeo.Data.Models.Address", "FromAddress")
                        .WithMany("OutgoingTransactions")
                        .HasForeignKey("FromAddressPublicAddress");

                    b.HasOne("StateOfNeo.Data.Models.Address", "ToAddress")
                        .WithMany("IncomingTransactions")
                        .HasForeignKey("ToAddressPublicAddress");

                    b.HasOne("StateOfNeo.Data.Models.Transaction", "Transaction")
                        .WithMany("Assets")
                        .HasForeignKey("TransactionScriptHash");
                });

            modelBuilder.Entity("StateOfNeo.Data.Models.Transaction", b =>
                {
                    b.HasOne("StateOfNeo.Data.Models.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockHash");
                });
#pragma warning restore 612, 618
        }
    }
}
